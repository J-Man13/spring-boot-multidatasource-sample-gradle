plugins {
	id 'org.springframework.boot' version '2.2.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
}

group = 'com.fuad'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	runtimeOnly 'com.h2database:h2'
}

test {
	useJUnitPlatform()
}

task createFolder{
	def configDir = new File(project.buildDir.path+"/libs", "config")
	def keystoreDir = new File(project.buildDir.path+"/libs", "keystore")
	def logDir = new File(project.buildDir.path+"/libs", "log")
	def libDir = new File(project.buildDir.path+"/libs", "lib")

	if(!logDir.exists()){
		logDir.mkdirs()
	}
	delete configDir
	delete libDir
	delete keystoreDir

	libDir.mkdirs()
	configDir.mkdirs()
	keystoreDir.mkdirs()
}

//copy config
task copyConfig(type: Copy) {
	into project.buildDir.path+"/libs/config"
	from "config"

}
//copy keystore
task copyKeystore(type: Copy) {
	into project.buildDir.path+"/libs/keystore"
	from "keystore"
}

//copy dependencies
task copyRuntimeLibs(type: Copy) {
	into project.buildDir.path+"/libs/lib"
	from configurations.compile

}

task bundleAll(type: Jar){
	dependsOn 'createFolder', 'copyRuntimeLibs', 'copyConfig', 'copyKeystore'

	manifest {
		def manifestClasspath = configurations.compile.collect { "lib/" + it.getName() }.join(' ')
		attributes 'Implementation-Title': 'spring-boot-multiple-database-gradle',
				'Implementation-Version': version,
				'Main-Class': 'com.javaskool.starter.SpringBootMultipleDatabaseGradleApplication',
				'Class-Path': manifestClasspath
	}
	baseName=project.name
	from { (configurations.compile - configurations.compile).collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task zip(type: Zip){
	dependsOn 'bundleAll'
	from 'build/libs'
}
